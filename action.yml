name: 'terraform_state_artifact'
description: 'Sets up and runs Terraform, and creates an encrypted Terraform artifact'
author: 'Sturla Bragason'
inputs:
  encryptionkey:
    description: 'Used to read artifact and as a key to encrypt and decrypt the state file artifact'
    required: true
  apply:
    description: 'terraform apply'
    required: false
    default: true
  destroy:
    description: 'terraform destroy'
    required: false
    default: false
  custom_plan_flags:
    description: 'Add custom flags to the terraform plan command'
    required: false
    default: ''
  custom_apply_flags:
    description: 'Add custom flags to the terraform apply command'
    required: false
    default: ''
  custom_destroy_flags:
    description: 'Add custom flags to the terraform apply -destroy command'
    required: false
    default: ''
  environment:
    description: 'Add environment'
    required: true
runs:
  using: "composite"
  steps:
    - uses: hashicorp/setup-terraform@v3
    - id: terraform
      run: |
        $Repo = "${{ github.repository }}"
        $BaseUri = "https://api.github.com"
        $ArtifactUri = "$BaseUri/repos/$Repo/actions/artifacts"
        $Token = "${{ github.token }}" | ConvertTo-SecureString -AsPlainText
        $RestResponse = Invoke-RestMethod -Authentication Bearer -Uri $ArtifactUri -Token $Token | Select-Object -ExpandProperty artifacts
        if ($RestResponse){
          $MostRecentArtifactURI = $RestResponse | Sort-Object -Property created_at -Descending | where name -eq "terraformstatefile" | Select-Object -First 1 | Select-Object -ExpandProperty archive_download_url
          Write-Host "Most recent artifact URI = $MostRecentArtifactURI"
          if ($MostRecentArtifactURI){
            Invoke-RestMethod -uri $MostRecentArtifactURI -Token $Token -Authentication bearer -outfile ./state.zip
            Expand-Archive ./state.zip
            openssl enc -d -in ./state/terraform.tfstate.enc -aes-256-cbc -pbkdf2 -pass pass:"${{ inputs.encryptionkey }}" -out ./terraform.tfstate
          }
        }

        #Get-Location
        #Get-ChildItem
        terraform init
        $workspace = "${{ github.workspace }}"
        $path = "$workspace/environments/${{ inputs.environment }}/main.tfvars"
        Write-Host "Workspace: $workspace, path: $path"
        if (Test-Path -path $path -PathType Leaf){
          Write-Host "File exist"
        } else {
          Write-Host "File does NOT exist"
        }
        $environment = "${{ inputs.environment }}"
        $terraformapply = "${{ inputs.apply }}"
        $terraformdestroy = "${{ inputs.destroy }}"
        #$custom_plan_flags = "${{ inputs.custom_plan_flags }} -var-file=""./environments/${{ inputs.environment }}/main.tfvars"""
        #$custom_apply_flags = "${{ inputs.custom_apply_flags }} -var-file=""./environments/${{ inputs.environment }}/main.tfvars"""
        #$custom_destroy_flags = "${{ inputs.custom_destroy_flags }} -var-file=""./environments/${{ inputs.environment }}/main.tfvars"""
        $custom_plan_flags = "-var-file=""./environments/${{ inputs.environment }}/main.tfvars"""
        $custom_apply_flags = "-var-file=""./environments/${{ inputs.environment }}/main.tfvars"""
        $custom_destroy_flags = "-var-file=""./environments/${{ inputs.environment }}/main.tfvars"""
        if ($terraformapply -eq "false"){
          $terraformapply = $false
        }
        if ($terraformdestroy -eq "false"){
          $terraformdestroy = $false
        }
        terraform plan $custom_plan_flags
        if ($terraformapply){
          terraform apply -auto-approve $custom_apply_flags

          if ($LastExitCode -eq 1){
            exit 1
          }
        }
        if ($terraformdestroy){
          terraform apply -destroy -auto-approve $custom_destroy_flags

          if ($LastExitCode -eq 1){
            exit 1
          }
        }
        $StateExists = Test-Path -Path ./terraform.tfstate -PathType Leaf
        if ($StateExists){
          openssl enc -in ./terraform.tfstate -aes-256-cbc -pbkdf2 -pass pass:"${{ inputs.encryptionkey }}" -out ./terraform.tfstate.enc
        }
      shell: pwsh
    - uses: actions/upload-artifact@v3
      with:
        name: terraformstatefile
        path: ./terraform.tfstate.enc
branding:
  icon: 'cloud'
  color: 'gray-dark'
